/* eslint-disable no-restricted-globals */

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim(); // 新しいSWを即時制御

// Precache all of the assets generated by your build process.
precacheAndRoute(self.__WB_MANIFEST);

// 古いキャッシュを削除するためのバージョン管理
const RUNTIME_CACHE = 'runtime-cache-v1';

self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((name) => {
          if (name !== RUNTIME_CACHE && !name.startsWith('workbox-precache')) {
            return caches.delete(name);
          }
        })
      );
    }).then(() => self.clients.claim())
  );
});

// App Shell-style routing (すべてのナビゲーションを index.html にフォールバック)
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  ({ request, url }) => {
    if (request.mode !== 'navigate') return false;
    if (url.pathname.startsWith('/_')) return false;
    if (url.pathname.match(fileExtensionRegexp)) return false;
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Runtimeキャッシュ例: PNG画像
registerRoute(
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  new StaleWhileRevalidate({
    cacheName: `${RUNTIME_CACHE}-images`,
    plugins: [
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// メッセージによる skipWaiting トリガー
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// 任意の追加キャッシュやルールはここに記載可能
